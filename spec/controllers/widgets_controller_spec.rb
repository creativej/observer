require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe WidgetsController do
  include Devise::TestHelpers

  def valid_attributes
    {
      "name" => "new name",
      "js" => "new js",
      "css" => "new css",
      "html" => "new html"
    }
  end

  before(:each) do
    @user = FactoryGirl.create(:user)
    sign_in @user
  end

  describe "GET index" do
    it "show an index of all widgets" do
      FactoryGirl.create :widget
      get :index

      expect(response.status).to eq(200)
    end
  end

  describe "GET show" do
    it "assigns the requested widget as @widget" do
      widget = FactoryGirl.create :widget

      get :show, { :id => widget.id }
      expect(response.status).to eq(200)
    end
  end

  describe "GET show by tag" do
    it "renders widget base on its tag" do
      PaperTrail.enabled = true

      widget = FactoryGirl.create :widget
      widget.js = "new js"
      widget.save

      widget.add_tag('0.0.1', 'desc')

      get :show_tag, { :id => widget.id, :tag => '0.0.1' }
      expect(response.status).to eq(200)
    end
  end

  describe "GET new" do
    it "assigns a new widget as @widget" do
      get :new

      expect(Widget.all.length).to eq(1)

      widget = Widget.first

      expect(widget.name).to eq('untitled')
      expect(widget.user.id).to eq(@user.id)

      response.should redirect_to(edit_widget_path(widget.id))
    end
  end

  describe "GET copy" do
    it "makes a new copy of a widget" do
      widget = FactoryGirl.create :widget

      get :copy, :id => widget.id

      expect(Widget.all.length).to eq(2)

      new_widget = Widget.last

      expect(new_widget.name).to eq("#{widget.name} (1)")
      expect(new_widget.user.id).to eq(@user.id)

      response.should redirect_to(edit_widget_path(new_widget.id))
    end
  end

  describe "GET edit" do
    it "assigns the requested widget as @widget" do
      widget = FactoryGirl.create :widget

      get :edit, { :id => widget.id }
      expect(response.status).to eq(200)
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested widget" do
        widget = FactoryGirl.create :widget

        put :update, {
          :id => widget.to_param,
          :widget => valid_attributes,
          :format => :json
        }

        widget.reload

        expect(widget.name).to eq(valid_attributes['name'])
        expect(widget.js).to eq(valid_attributes['js'])
        expect(widget.css).to eq(valid_attributes['css'])
        expect(widget.html).to eq(valid_attributes['html'])

        expect(response.status).to eq(200)
      end

      it "update the widget with invalid parameters" do
        widget = FactoryGirl.create :widget

        put :update, {
          :id => widget.to_param,
          :widget => {
            'name' => nil
          },
          :format => :json
        }

        expect(response.status).to eq(422)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested widget" do
      widget = FactoryGirl.create :widget
      expect {
        delete :destroy, {:id => widget.to_param}
      }.to change(Widget, :count).by(-1)
    end

    it "redirects to the widgets list" do
      widget = FactoryGirl.create :widget
      delete :destroy, {:id => widget.to_param}
      response.should redirect_to(widgets_url)
    end
  end

end

require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ConnectionsController do
  describe "Authenticated" do
    include Devise::TestHelpers

    before(:each) do
      @user = FactoryGirl.create(:user)
      sign_in @user
    end

    def valid_attributes
      {
        :host => 'localhost',
        :port => '8000',
        :database_type => 'mysql',
        :username => 'new name',
        :password => ''
      }
    end

    def new_connection
      FactoryGirl.create :connection
    end

    describe "GET index" do
      it "assigns all connections as @connections" do
        new_connection

        get :index

        expect(response.status).to eq(200)
      end
    end

    describe "GET show" do
      it "assigns the requested connection as @connection" do
        conn = new_connection

        get :show, {:id => conn.to_param}

        response.should redirect_to(edit_connection_path(conn.id))
      end
    end

    describe "GET new" do
      it "assigns a new connection as @connection" do
        get :new
        expect(response.status).to eq(200)
      end
    end

    describe "GET edit" do
      it "assigns the requested connection as @connection" do
        connection = new_connection
        get :edit, {:id => connection.to_param}
        expect(response.status).to eq(200)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Connection" do
          expect(Connection.all.length).to eq(0)

          post :create, {:connection => valid_attributes}

          expect(Connection.all.length).to eq(1)

          conn = Connection.first

          expect(conn.host).to eq(valid_attributes[:host])
          expect(conn.username).to eq(valid_attributes[:username])
          expect(conn.user_id).to eq(@user.id)

          response.should redirect_to(connections_path)
        end

        it "redirects to the connection the specific redirect" do
          post :create, { :connection => valid_attributes, :redirect => '/' }
          response.should redirect_to('/')
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved connection as @connection" do
          # Trigger the behavior that occurs when invalid params are submitted
          Connection.any_instance.stub(:save).and_return(false)
          post :create, {:connection => { "host" => "invalid value" }}
          assigns(:connection).should be_a_new(Connection)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Connection.any_instance.stub(:save).and_return(false)
          post :create, {:connection => { "host" => "invalid value" }}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested connection" do
          conn = new_connection

          put :update, {:id => conn.to_param, :connection => valid_attributes}
          conn.reload
          expect(conn.host).to eq(valid_attributes[:host])
          expect(conn.username).to eq(valid_attributes[:username])

          response.should redirect_to(edit_connection_path(conn))
        end

        it "redirects to the connection to the specific url" do
          conn = new_connection
          put :update, {:id => conn.to_param, :connection => valid_attributes, :redirect => '/'}
          response.should redirect_to('/')
        end
      end

      describe "with invalid params" do
        it "assigns the connection as @connection" do
          connection = new_connection
          # Trigger the behavior that occurs when invalid params are submitted
          Connection.any_instance.stub(:save).and_return(false)
          put :update, {:id => connection.to_param, :connection => { "host" => "invalid value" }}
          assigns(:connection).should eq(connection)
        end

        it "re-renders the 'edit' template" do
          connection = new_connection
          # Trigger the behavior that occurs when invalid params are submitted
          Connection.any_instance.stub(:save).and_return(false)
          put :update, {:id => connection.to_param, :connection => { "host" => "invalid value" }}
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested connection" do
        connection = new_connection
        expect {
          delete :destroy, {:id => connection.to_param}
        }.to change(Connection, :count).by(-1)
      end

      it "redirects to the connections list" do
        connection = new_connection
        delete :destroy, {:id => connection.to_param}
        response.should redirect_to(connections_url)
      end
    end
  end
end

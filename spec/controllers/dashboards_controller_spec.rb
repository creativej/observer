require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe DashboardsController do
  describe "Authenticated" do
    include Devise::TestHelpers

    before(:each) do
      @user = FactoryGirl.create(:user)
      sign_in @user
    end

    # This should return the minimal set of attributes required to create a valid
    # Dashboard. As you add validations to Dashboard, be sure to
    # update the return value of this method accordingly.
    def valid_attributes
      {
        :name => "my dashboard",
        :data => 'new data',
        :scale => false,
        :is_public => false
      }
    end

    def new_dashboard
      FactoryGirl.create :dashboard, {
        :user => @user
      }
    end

    describe "GET index" do
      it "assigns all dashboards as @dashboards" do
        dashboard = new_dashboard
        get :index
        expect(response.status).to eq(200)
      end
    end

    describe "GET new" do
      it "assigns a new dashboard as @dashboard" do
        get :new
        expect(Dashboard.all.length).to eq(1)
        d = Dashboard.first
        response.should redirect_to(edit_dashboard_path(d))
      end
    end

    describe "GET edit" do
      it "assigns the requested dashboard as @dashboard" do
        dashboard = new_dashboard
        get :edit, {:id => dashboard.to_param}

        response.should render_template('edit')
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested dashboard" do
          dashboard = new_dashboard
          # Assuming there are no other dashboards in the database, this
          # specifies that the Dashboard created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Dashboard.any_instance.should_receive(:update_attributes).with({ "name" => "MyString" })
          put :update, {:id => dashboard.to_param, :dashboard => { "name" => "MyString" }}
        end
      end

      describe "with invalid params" do
        it "assigns the dashboard as @dashboard" do
          dashboard = new_dashboard
          # Trigger the behavior that occurs when invalid params are submitted
          Dashboard.any_instance.stub(:save).and_return(false)
          put :update, {:id => dashboard.to_param, :dashboard => { "name" => "invalid value" }}
          assigns(:dashboard).should eq(dashboard)
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested dashboard" do
        dashboard = new_dashboard
        expect {
          delete :destroy, {:id => dashboard.to_param}
        }.to change(Dashboard, :count).by(-1)
      end

      it "redirects to the dashboards list" do
        dashboard = new_dashboard
        delete :destroy, {:id => dashboard.to_param}
        response.should redirect_to(dashboards_url)
      end
    end
  end
end
